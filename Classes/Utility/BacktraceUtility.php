<?php
declare(strict_types=1);

namespace De\SWebhosting\DatabaseLog\Utility;

/*                                                                        *
 * This script belongs to the TYPO3 Flow package                          *
 * "De.SWebhosting.DatabaseLog".                                          *
 *                                                                        *
 * It is free software; you can redistribute it and/or modify it under    *
 * the terms of the GNU General Public License, either version 3 of the   *
 * License, or (at your option) any later version.                        *
 *                                                                        *
 * The TYPO3 project - inspiring people to share!                         *
 *                                                                        */

use Neos\Flow\Annotations as Flow;
use Neos\Flow\Package\PackageInterface;
use Neos\Flow\Package\PackageManager;

/**
 * Utility for backtrace handling.
 *
 * @Flow\Scope("singleton")
 */
class BacktraceUtility
{
    /**
     * @Flow\Inject
     * @var PackageManager
     */
    protected $packageManager;

    /**
     * Returns backtrace data
     *
     * @param integer $backTraceOffset
     * @return array Array containing detected package key, class name and method name (in this order).
     */
    public function getBacktraceData($backTraceOffset)
    {

        $packageKey = null;
        $className = null;
        $methodName = null;

        $backtraceArray = debug_backtrace(false);
        foreach ($backtraceArray as $backtraceData) {

            $methodName = isset($backtraceData['function']) ? $backtraceData['function'] : null;
            if (!isset($methodName)) {
                continue;
            }

            // Filter out some system methods.
            if ($methodName === '__call' || $methodName === 'call_user_func' || $methodName === 'call_user_func_array') {
                continue;
            }

            $className = isset($backtraceData['class']) ? $backtraceData['class'] : null;

            // Filter out system class names.
            if (isset($className) && strstr($className, 'DependencyProxy')) {
                continue;
            }

            if ($backTraceOffset > 0) {
                $backTraceOffset--;
                continue;
            }

            if (isset($className)) {

                // Cut off the _Original substring generated by Flow.
                if (substr($className, -9) === '_Original') {
                    $className = substr($className, 0, strlen($className) - 9);
                }

                $packageKey = $this->getPackageKeyByClassName($className);
                break;
            }
        }

        $backtraceData = [$packageKey, $className, $methodName];
        return $backtraceData;
    }

    private function getAvailablePackageNamespaces(): array
    {
        $namespaces = [];
        foreach ($this->packageManager->getFlowPackages() as $package) {
            foreach ($package->getNamespaces() as $namespace) {
                $namespaces[$namespace] = $package->getPackageKey();
            }
        }
        return $namespaces;
    }

    /**
     * Finds a package by a given class name of that package, @param string $className The fully qualified class name
     * to find the possessing package of
     *
     * @return PackageInterface The package the given object belongs to or NULL if it could not be found
     * @see getPackageOfObject().
     *
     */
    private function getPackageKeyByClassName($className)
    {
        $packageNamespaces = $this->getAvailablePackageNamespaces();
        uksort(
            $packageNamespaces,
            function (string $packageKeyOne, string $packageKeyTwo) {
                return strlen($packageKeyTwo) - strlen($packageKeyOne);
            }
        );

        /** @var $package PackageInterface */
        foreach ($packageNamespaces as $packageNamespace => $packageKey) {
            if (strpos($className, $packageNamespace) === 0) {
                return $packageKey;
            }
        }

        return null;
    }
}
